---
name: Update Phoenix Template

# WARNING: This workflow is specifically for maintaining the phoenix-devenv-template repository.
# It regenerates the entire Phoenix application, overwriting all files.
# DO NOT use this workflow in projects created from this template - it will destroy your code!
# 
# This workflow requires repository settings to allow GitHub Actions to create PRs:
# Settings > Actions > General > Workflow permissions:
# - Select "Read and write permissions"
# - Check "Allow GitHub Actions to create and approve pull requests"
#
# For auto-merge to work:
# Settings > General > Pull Requests:
# - Check "Allow auto-merge"

on:
  schedule:
    - cron: "0 0 * * *" # Daily at midnight UTC
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  update-phoenix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Disable git hooks for CI
        run: |
          git config core.hooksPath /dev/null

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict


      - name: Check current Phoenix version
        id: current_version
        run: |
          CURRENT_VERSION=$(./scripts/get-current-phoenix-version.sh)
          echo "Current Phoenix version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Get latest Phoenix version
        id: latest_version
        run: |
          # Install Elixir/Phoenix dependencies
          mix local.hex --force
          mix archive.install hex phx_new --force
          LATEST_VERSION=$(./scripts/get-latest-phoenix-version.sh)
          echo "Latest Phoenix version: $LATEST_VERSION"
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if update is needed
        id: check_update
        run: |
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          LATEST="${{ steps.latest_version.outputs.latest_version }}"
          if [ "$CURRENT" = "$LATEST" ]; then
            echo "Already on latest Phoenix version $LATEST"
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "skip_reason=Already on latest version" >> $GITHUB_OUTPUT
          else
            echo "Update available: $CURRENT -> $LATEST"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip if no update needed
        if: steps.check_update.outputs.needs_update == 'false'
        run: |
          echo "Skipping Phoenix regeneration - ${{ steps.check_update.outputs.skip_reason }}"
          exit 0

      - name: Regenerate Phoenix application
        if: steps.check_update.outputs.needs_update == 'true'
        run: ./scripts/regenerate-phoenix.sh

      - name: Show changes after recreation
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          echo "Changes after recreating Phoenix:"
          git diff --stat

      - name: Disable git hooks before PR creation
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          git config core.hooksPath /dev/null

      - name: Create Pull Request
        if: steps.check_update.outputs.needs_update == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "Update Phoenix to version ${{ steps.latest_version.outputs.latest_version }}"
          title: "Update Phoenix to version ${{ steps.latest_version.outputs.latest_version }}"
          body: |
            This PR updates the Phoenix template to version ${{ steps.latest_version.outputs.latest_version }}.

            Changes:
            - Updated Phoenix dependencies  
            - Regenerated Phoenix application structure
            - Preserved customized configuration
          branch: update-phoenix-template
          delete-branch: true
